Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-03-22T00:32:04-03:00

====== AJAX Request 2 ======
Created jueves 22 marzo 2018

fetch() GET Requests I
On the first line, we call the fetch() function and pass it a single argument - the URL of the API endpoint. Because this is a GET request, this URL will contain the URL to the API and may also contain query parameters, an API key, a client ID, or other information necessary to make the request (depending on the API in question).

The fetch() function

creates a request object using the information provided to it
sends that request object to the URL provided
returns a Promise that ultimately resolves to a response object, which contains a lot of information, including (if everything went well), the information requested.
Note: Because fetch() is a web API, not all browsers support it. To ensure that all users can run code that uses fetch, we can add a polyfill that will be used if a user doesn't have fetch() support in their browser. You can find a popular fetch polyfill here and you can check out the installation instructions to see how to add it to your own app.

=== fetch() GET Requests II ===
We chain a .then() method to the closing parentheses of the fetch() function. This is where the asynchronicity of JavaScript comes in - the fetch() function makes the request and returns the response, and we don't call the function that will handle the response until it has been received.

.then() takes two callback functions as parameters, the first of which handles success and the second of which handles failure.

The first callback function takes response as a parameter. response is the resolution of the Promise returned by the fetch() function.

On the next line, we use a conditional statement to check the ok property of the response object. If it evaluates to a truthy value, we call the .json() method on the response object. This method takes the information from the response and converts it to a JSON object whose properties and values we can access.

Because the .json() method takes some time to implement, it returns a Promise that will eventually resolve with the desired JSON object. We will then chain another .then() method call to use the converted response object. We return response.json().

Outside of the code block of the conditional statement, we throw new Error('Request failed'). This error will only be thrown if response.json() is not returned because the response was not ok.

Then, we create the second callback function, which takes a single parameter, networkError. This function will only be called if there is a network error, such as a 500 error. In this function's code block, we log networkError.message to the console so that we can determine what went wrong. The .then() method is closed on the next line with a closing parenthesis ()).

At the end of the first .then() method, we chain another.then() method that takes a single callback function as an argument. This callback function's parameter is jsonResponse and this function will handle the jsonResponse object. This is an object that contains the information we requested from the API and we can use that information on our website.


**fetch('https://api-to-call.com/endpoint').then(**
**response => { **
**	if (response.ok) {**
**   return response.json(); **
**  }**
**  throw new Error('Request failed!');**
**}, networkError => {**
**  console.log(networkError.message);**
**}).then(jsonResponse => jsonResponse);**



