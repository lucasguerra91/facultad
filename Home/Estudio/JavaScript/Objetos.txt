Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-03-07T20:19:45-03:00

====== Objetos ======
Created miÃ©rcoles 07 marzo 2018

**let person = {**
**  name: 'Tyron',**
**  age: 40,**
**  weekendAlarm: 'No alarms needed',**
**  weekAlarm: 'Alarm set to 7AM'**
**};**

**console.log(person['name']);**
**console.log(person['age']);**

**let day = 'Tuesday';**
**let alarm;**

**if (day === 'Saturday' || day === 'Sunday' ) {**
**  alarm = 'weekendAlarm';**
**} else {**
**  alarm = 'weekAlarm';**
**}**

**console.log(person[alarm]);**


=== Adding a Property ===
What if we want to add an item to our object after we've created it?
We can do this by assigning a value to a new key that's attached to our object. We attach a new key to our object using dot or bracket notation.
Objects are considered mutable, which means you can change them after they're created. Even if you save an object to a const variable, you can still add to and edit the key-value pairs inside of it without causing an error.
As an example, if we have this object:

**const restaurant = {**
**  name: 'Italian Bistro',**
**  seatingCapacity: 120,**
**  hasDineInSpecial: true,**
**  entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine pesto']**
**}**
**We can add appetizers and desserts keys by writing:**

**restaurant['appetizers'] = ['Fried Calamari', 'Bruschetta'];**
**restaurant.desserts = ['Homemade Tiramisu', 'Cannoli'];**

Since appetizers and desserts don't exist in the restaurant object, these lines will create and add the key-value pairs.


=== Methods ===

So far, we've paired keys with strings, numbers, booleans, and arrays. In this exercise, we'll show you how to pair keys with functions.
When objects have key-function pairs, we call the function a method. It looks like this:

**const restaurant = {**
**  name: 'Italian Bistro',**
**  seatingCapacity: 120,**
**  hasDineInSpecial: true,**
**  entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine pesto'],**
**  openRestaurant: () => {**
**    return 'Unlock the door, flip the open sign. We are open for business!';**
**  },**
**  closeRestaurant: () => {**
**    return 'Lock the door, flip the open sign. We are closed.'**
**  }**
**};**

**console.log(restaurant.openRestaurant());**

**console.log(restaurant.closeRestaurant());**

In the example above, we use arrow syntax to create two methods, .openRestaurant() and .closeRestaurant() in the restaurant object. When we call these methods they return text, which we log to the console. The text in the console appears as follows:

Unlock the door, flip the open sign. We are open for business!
Lock the door, flip the open sign. We are closed.


Convencion utilizada en ES6
**let person = {**
	**  name: 'Tyron',**
	**  age: 40,**
	**  weekendAlarm: 'No alarms needed',**
	**  weekAlarm: 'Alarm set to 7AM',**
	
	**  sayHello: () => {return 'Hello, there!'},**
	**  sayGoodbye(){ return 'Goodbye!'}**
**  };**


=== The this Keyword I ===

Objects hold data and functions, which we can use to represent real-world things in JavaScript.
The next step is to create methods that operate on the data inside of the same object.
Let's try it by using the hasDineInSpecial property in the .openRestaurant() method:

**const restaurant = {**
**  name: 'Italian Bistro',**
**  seatingCapacity: 120,**
**  hasDineInSpecial: true,**
**  entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine pesto'],**
**  openRestaurant() {**
**    if (hasDineInSpecial) {**
**      return 'Unlock the door, post the special on the board, then flip the open sign.';**
**    } else {**
**      return 'Unlock the door, then flip the open sign.';**
**    }**
**  }**
**};**

**console.log(restaurant.openRestaurant());**

The output would be:
ReferenceError: hasDineInSpecial is not defined
The error above doesn't work because hasDineInSpecial is out of the .openRestaurant() method's scope.
To address this scope issue, we can use the this keyword to access properties inside of the same object.
We can utilize this in the .openRestaurant() function as such:

**const restaurant = {**
**  name: 'Italian Bistro',**
**  seatingCapacity: 120,**
**  hasDineInSpecial: true,**
**  entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine pesto'],**
**  openRestaurant: function() {**
**    if (this.hasDineInSpecial) {**
**      return 'Unlock the door, post the special on the board, then flip the open sign.'**
**    } else {**
**      return 'Unlock the door, then flip the open sign.'**
**    }**
**  }**
**}**
**console.log(restaurant.openRestaurant());**

The output would be:
Unlock the door, post the special on the board, then flip the open sign.
The .openRestaurant() method in the example above will return a value. The this keyword refers to the current object, which we use to grab the value saved to hasDineInSpecial.
this.hasDineInSpecial inside the object is the same as accessing restaurant.hasDineInSpecial outside the object.

=== Getters and Setters ===
A common object design paradigm is to include getter and setter methods as attributes.
Getter and setter methods get and set the properties inside of an object. There are a couple of advantages to using these methods for getting and setting properties directly:
You can check if new data is valid before setting a property.
You can perform an action on the data while you are getting or setting a property.
You can control which properties can be set and retrieved.
Let's consider our restaurant object from earlier:

**let restaurant = {**
**  name: 'Italian Bistro',**
**  seatingCapacity: 120,**
**  hasDineInSpecial: true,**
**  entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine Pesto']**
**}**
**In the example above, the seatingCapacity key holds the number 120. Let's imagine that the restaurant managers like that this value is a number because they can use it to calculate the number of available seats at any given time during the evening.**

**Available seats = Capacity - Seats Taken**
**Imagine the restaurant adds an extra room to increase the seating capacity by thirty people and the managers must change the seatingCapacity value in the restaurant object.**

**A good developer would anticipate seatingCapacity as something that could change. To address this change, they would write code that checks if the newly set seatingCapacity value is valid. For example, the method should check if the seatingCapacity field is a number like 150, not the string 'one hundred fifty'. We can write this into a setter method as follows:**

**let restaurant = {**
**  _name: 'Italian Bistro',**
**  _seatingCapacity: 120,**
**  _hasDineInSpecial: true,**
**  _entrees: ['Penne alla Bolognese', 'Chicken Cacciatore', 'Linguine pesto'],**

**  set seatingCapacity(newCapacity) {**
**      if (typeof newCapacity === 'number') {**
**        this._seatingCapacity = newCapacity;**
**      console.log(`${newCapacity} is valid input.`);**
**    } else {**
**        console.log(`Change ${newCapacity} to a number.`)**
**    }**
**  }**
**}**
Let's consider the new information in this example step-by-step.
We prepended the property names with underscores (_). Developers use an underscore before a property name to indicate a property or value should not be modified directly by other code. We recommend prepending all properties with an underscore, and creating setters for all attributes you want to access later in your code.
The set seatingCapacity() setter method accepts newCapacity as a variable. The newCapacity variable holds the new value that we will store in _seatingCapacity.
Inside of the .seatingCapacity() setter we use a conditional statement to check if the newCapacity variable (our new value) is a number.
If the input value is a number (valid input), then we use this._seatingCapacity to change the value assigned to _seatingCapacity. If it is not valid, then we output a message to the user.


