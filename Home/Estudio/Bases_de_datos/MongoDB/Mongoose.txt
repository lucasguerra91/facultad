Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4

====== Mongoose ======
Created miércoles 04 abril 2018

=== Conexion a MongoDB ===
**//Import the mongoose module**
**var mongoose = require('mongoose');**

**//Set up default mongoose connection**
**var mongoDB = 'mongodb://127.0.0.1/my_database';**
**mongoose.connect(mongoDB);**
**// Get Mongoose to use the global promise library**
**mongoose.Promise = global.Promise;**
**//Get the default connection**
**var db = mongoose.connection;**

**//Bind connection to error event (to get notification of connection errors)**
**db.on('error', console.error.bind(console, 'MongoDB connection error:'));**


=== Defining and creating models ===
Models are defined using the Schema interface. The Schema allows you to define the fields stored in each document along with their validation requirements and default values. In addition, you can define static and instance helper methods to make it easier to work with your data types, and also virtual properties that you can use like any other field, but which aren't actually stored in the database.
Schemas are then "compiled" into models using the mongoose.model() method. Once you have a model you can use it to find, create, update, and delete objects of the given type.

=== Defining schemas ===
The code fragment below shows how you might define a simple schema. First you require() mongoose, then use the Schema constructor to create a new schema instance, defining the various fields inside it in the constructor's object parameter.

//Require Mongoose
var mongoose = require('mongoose');

//Define a schema
var Schema = mongoose.Schema;

var SomeModelSchema = new Schema({
	a_string: String,
	a_date: Date
});

=== Creating a model ===
Models are created from schemas using the mongoose.model() method:

**// Define schema**
**var Schema = mongoose.Schema;**

**var SomeModelSchema = new Schema({**
**    a_string: String,**
**    a_date: Date**
**});**

**// Compile model from schema**
**var SomeModel = mongoose.model('SomeModel', SomeModelSchema );**

The first argument is the singular name of the collection that will be created for your model (Mongoose will create the database collection for the above model SomeModel above), and the second argument is the schema you want to use in creating the model.

=== Schema types (fields) ===
A schema can have an arbitrary number of fields — each one represents a field in the documents stored in MongoDB. An example schema showing many of the common field types and how they are declared is shown below.

**var schema = new Schema(**
**{**
**  name: String,**
**  binary: Buffer,**
**  living: Boolean,**
**  updated: { type: Date, default: Date.now },**
**  age: { type: Number, min: 18, max: 65, required: true },**
**  mixed: Schema.Types.Mixed,**
**  _someId: Schema.Types.ObjectId,**
**  array: [],**
**  ofString: [String], // You can also have an array of each of the other types too.**
**  nested: { stuff: { type: String, lowercase: true, trim: true } }**
**})**

Most of the SchemaTypes (the descriptors after “type:” or after field names) are self explanatory. The exceptions are:

=== ObjectId: ===
Represents specific instances of a model in the database. For example, a book might use this to represent its author object. This will actually contain the unique ID (_id) for the specified object. We can use the populate() method to pull in the associated information when needed.

=== Mixed: ===
An arbitrary schema type.

=== []: ===
An array of items. You can perform JavaScript array operations on these models (push, pop, unshift, etc.). The examples above show an array of objects without a specified type and an array of String objects, but you can have an array of any type of object.


The code also shows both ways of declaring a field:
* Field name and type as a key-value pair (i.e. as done with fields name, binary and living).
* Field name followed by an object defining the type, and any other options for the field. Options include things like:
	* default values.
	* built-in validators (e.g. max/min values) and custom validation functions.
	* Whether the field is required
	* Whether String fields should automatically be set to lowercase, uppercase, or trimmed (e.g. { type: String, lowercase: true, trim: true })

=== Validation ===
Mongoose provides built-in and custom validators, and synchronous and asynchronous validators. It allows you to specify both the acceptable range or values and the error message for validation failure in all cases.

=== The built-in validators include: ===
* All SchemaTypes have the built-in required validator. This is used to specify whether the field must be supplied in order to save a document.
* Numbers have min and max validators.
* Strings have:
	* enum: specifies the set of allowed values for the field.
	* match: specifies a regular expression that the string must match.
	* maxlength and minlength for the string


The example below (slightly modified from the Mongoose documents) shows how you can specify some of the validator types and error messages:
 **var breakfastSchema = new Schema({**
**      eggs: {**
**        type: Number,**
**        min: [6, 'Too few eggs'],**
**        max: 12**
**        required: [true, 'Why no eggs?']**
**      },**
**      drink: {**
**        type: String,**
**        enum: ['Coffee', 'Tea', 'Water',]**
**      }**
**    });**

=== Virtual Properties ===
Virtual properties are document properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields, while setters are useful for de-composing a single value into multiple values for storage. The example in the documentation constructs (and deconstructs) a full name virtual property from a first and last name field, which is easier and cleaner than constructing a full name every time one is used in a template.

=== Methods and query helpers ===
A schema can also have instance methods, static methods, and query helpers. The instance and static methods are similar, but with the obvious difference that an instance method is associated with a particular record and has access to the current object. Query helpers allow you to extend mongoose's chainable query builder API (for example, allowing you to add a query "byName" in addition to the find(), findOne() and findById() methods).

=== Using models ===
Once you've created a schema you can use it to create models. The model represents a collection of documents in the database that you can search, while the model's instances represent individual documents that you can save and retrieve.


=== Creating and modifying documents ===
To create a record you can define an instance of the model and then call save(). The examples below assume SomeModel is a model (with a single field "name") that we have created from our schema.

**// Create an instance of model SomeModel**
**var awesome_instance = new SomeModel({ name: 'awesome' });**

**// Save the new model instance, passing a callback**
**awesome_instance.save(function (err) {**
**  if (err) return handleError(err);**
**  // saved!**
**});**

Creation of records (along with updates, deletes, and queries) are asynchronous operations — you supply a callback that is called when the operation completes. The API uses the error-first argument convention, so the first argument for the callback will always be an error value (or null). If the API returns some result, this will be provided as the second argument.

You can also use create() to define the model instance at the same time as you save it. The callback will return an error for the first argument and the newly-created model instance for the second argument.

**SomeModel.create({ name: 'also_awesome' }, function (err, awesome_instance) {**
**  if (err) return handleError(err);**
**  // saved!**
**});**



Every model has an associated connection (this will be the default connection when you use mongoose.model()). You create a new connection and call .model() on it to create the documents on a different database.

You can access the fields in this new record using the dot syntax, and change the values. You have to call save() or update() to store modified values back to the database.

**// Access model field values using dot notation**
**console.log(awesome_instance.name); //should log 'also_awesome'**

**// Change record by modifying the fields, then calling save().**
**awesome_instance.name="New cool name";**
**awesome_instance.save(function (err) {**
**   if (err) return handleError(err); // saved!**
**   });**


=== Searching for records ===
You can search for records using query methods, specifying the query conditions as a JSON document. The code fragment below shows how you might find all athletes in a database that play tennis, returning just the fields for athlete name and age. Here we just specify one matching field (sport) but you can add more criteria, specify regular expression criteria, or remove the conditions altogether to return all athletes.

**var Athlete = mongoose.model('Athlete', yourSchema);**
**// find all athletes who play tennis, selecting the 'name' and 'age' fields**
**Athlete.find({ 'sport': 'Tennis' }, 'name age', function (err, athletes) {**
**  if (err) return handleError(err);**
**  // 'athletes' contains the list of athletes that match the criteria.**
**})**


If you specify a callback, as shown above, the query will execute immediately. The callback will be invoked when the search completes.

//Note: All callbacks in Mongoose use the pattern callback(error, result). If an error occurs executing the query, the error parameter will contain an error document, and result will be null. If the query is successful, the error parameter will be null, and the result will be populated with the results of the query.//



If you don't specify a callback then the API will return a variable of type Query. You can use this query object to build up your query and then execute it (with a callback) later using the exec() method.


**// find all athletes that play tennis**
**var query = Athlete.find({ 'sport': 'Tennis' });**

**// selecting the 'name' and 'age' fields**
**query.select('name age');**

**// limit our results to 5 items**
**query.limit(5);**

**// sort by age**
**query.sort({ age: -1 });**

**// execute the query at a later time**
**query.exec(function (err, athletes) {**
**  if (err) return handleError(err);**
**  // athletes contains an ordered list of 5 athletes who play Tennis**
**})**


Above we've defined the query conditions in the find() method. We can also do this using a where() function, and we can chain all the parts of our query together using the dot operator (.) rather than adding them separately. The code fragment below is the same as our query above, with an additional condition for the age.

**Athlete.**
**  find().**
**  where('sport').equals('Tennis').**
**  where('age').gt(17).lt(50).  //Additional where query**
**  limit(5).**
**  sort({ age: -1 }).**
**  select('name age').**
**  exec(callback); // where callback is the name of our callback function.**

The find() method gets all matching records, but often you just want to get one match. The following methods query for a single record:

findById(): Finds the document with the specified id (every document has a unique id).
findOne(): Finds a single document that matches the specified criteria.
findByIdAndRemove(), findByIdAndUpdate(), findOneAndRemove(), findOneAndUpdate(): Finds a single document by id or criteria and either update or remove it. These are useful convenience functions for updating and removing records.


//Note: There is also a count() method that you can use to get the number of items that match conditions. This is useful if you want to perform a count without actually fetching the records.//


=== Working with related documents - population ===








